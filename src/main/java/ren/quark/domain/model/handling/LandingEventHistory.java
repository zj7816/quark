/** *dianping.com Inc *Copyright(c)2004-2016 All Rights Reserved. */package ren.quark.domain.model.handling;import org.apache.commons.lang3.Validate;import ren.quark.domain.model.shared.ValueObject;import java.util.*;/** * 数据落地事件 * * @author zhangjie * @version $Id: LandingEventHistory.java, v 0.1 2016-03-14 下午12:01 zhangjie Exp $$ */public class LandingEventHistory implements ValueObject<LandingEventHistory> {    private List<LandingEvent> landingEventList;    private static final List<LandingEvent> EMPTY = Collections.<LandingEvent>emptyList();    public LandingEventHistory(final List<LandingEvent> landingEvents) {        Validate.notEmpty(landingEvents, "landingevents can not be null");        setLandingEventList(landingEvents);    }    public List<LandingEvent> landingsByGenerateTime() {        final List<LandingEvent> ordered = new ArrayList<LandingEvent>(new HashSet<LandingEvent>(landingEventList));        Collections.sort(ordered, new Comparator<LandingEvent>() {            @Override            public int compare(LandingEvent o1, LandingEvent o2) {                return o1.generatedDate().compareTo(o2.generatedDate());            }        });        return Collections.unmodifiableList(ordered);    }    @Override    public boolean sameAs(LandingEventHistory other) {        return other != null && landingEventList.equals(other.landingEventList);    }    private void setLandingEventList(List<LandingEvent> landingEventList) {        this.landingEventList = new ArrayList<LandingEvent>(landingEventList);    }    @Override    public boolean equals(Object obj) {        if (obj == this) {            return true;        }        if (!(obj instanceof LandingEventHistory)) {            return false;        }        return sameAs((LandingEventHistory) obj);    }    @Override    public int hashCode() {        return this.landingEventList.hashCode();    }}